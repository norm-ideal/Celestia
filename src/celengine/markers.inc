// This is a generated code, don't edit it manually.
// This file is in public domain.

// Filled Markers

constexpr std::array<float, 232> FilledMarkersData = {
    // FilledSquare
    -1.000000f, -1.000000f,
     1.000000f, -1.000000f,
     1.000000f,  1.000000f,
    -1.000000f,  1.000000f,
    // RightArrow
    -3.000000f,  0.333333f,
    -3.000000f, -0.333333f,
    -2.000000f, -0.250000f,
    -2.000000f, -0.250000f,
    -2.000000f,  0.250000f,
    -3.000000f,  0.333333f,
    -2.000000f,  0.666667f,
    -2.000000f, -0.666667f,
    -1.000000f,  0.000000f,
    // LeftArrow
     3.000000f, -0.333333f,
     3.000000f,  0.333333f,
     2.000000f,  0.250000f,
     2.000000f,  0.250000f,
     2.000000f, -0.250000f,
     3.000000f, -0.333333f,
     2.000000f, -0.666667f,
     2.000000f,  0.666667f,
     1.000000f,  0.000000f,
    // UpArrow
    -0.333333f, -3.000000f,
     0.333333f, -3.000000f,
     0.250000f, -2.000000f,
     0.250000f, -2.000000f,
    -0.250000f, -2.000000f,
    -0.333333f, -3.000000f,
    -0.666667f, -2.000000f,
     0.666667f, -2.000000f,
     0.000000f, -1.000000f,
    // DownArrow
     0.333333f,  3.000000f,
    -0.333333f,  3.000000f,
    -0.250000f,  2.000000f,
    -0.250000f,  2.000000f,
     0.250000f,  2.000000f,
     0.333333f,  3.000000f,
     0.666667f,  2.000000f,
    -0.666667f,  2.000000f,
     0.000000f,  1.000000f,
    // SelPointer
     0.000000f,  0.000000f,
    -20.000000f,  6.000000f,
    -20.000000f, -6.000000f,
    // Crosshair
     0.000000f,  0.000000f,
     1.000000f, -1.000000f,
     1.000000f,  1.000000f,
    // Disk
     1.000000f,  0.000000f,
     0.809017f,  0.587785f,
     0.309017f,  0.951057f,
    -0.309017f,  0.951057f,
    -0.809017f,  0.587785f,
    -1.000000f,  0.000000f,
    -0.809017f, -0.587785f,
    -0.309017f, -0.951057f,
     0.309017f, -0.951057f,
     0.809017f, -0.587785f,
    // LargeDisk
     1.000000f,  0.000000f,
     0.994522f,  0.104528f,
     0.978148f,  0.207912f,
     0.951057f,  0.309017f,
     0.913545f,  0.406737f,
     0.866025f,  0.500000f,
     0.809017f,  0.587785f,
     0.743145f,  0.669131f,
     0.669131f,  0.743145f,
     0.587785f,  0.809017f,
     0.500000f,  0.866025f,
     0.406737f,  0.913545f,
     0.309017f,  0.951057f,
     0.207912f,  0.978148f,
     0.104528f,  0.994522f,
     0.000000f,  1.000000f,
    -0.104528f,  0.994522f,
    -0.207912f,  0.978148f,
    -0.309017f,  0.951057f,
    -0.406737f,  0.913545f,
    -0.500000f,  0.866025f,
    -0.587785f,  0.809017f,
    -0.669131f,  0.743145f,
    -0.743145f,  0.669131f,
    -0.809017f,  0.587785f,
    -0.866025f,  0.500000f,
    -0.913545f,  0.406737f,
    -0.951057f,  0.309017f,
    -0.978148f,  0.207912f,
    -0.994522f,  0.104528f,
    -1.000000f,  0.000000f,
    -0.994522f, -0.104528f,
    -0.978148f, -0.207912f,
    -0.951057f, -0.309017f,
    -0.913545f, -0.406737f,
    -0.866025f, -0.500000f,
    -0.809017f, -0.587785f,
    -0.743145f, -0.669131f,
    -0.669131f, -0.743145f,
    -0.587785f, -0.809017f,
    -0.500000f, -0.866025f,
    -0.406737f, -0.913545f,
    -0.309017f, -0.951057f,
    -0.207912f, -0.978148f,
    -0.104528f, -0.994522f,
    -0.000000f, -1.000000f,
     0.104528f, -0.994522f,
     0.207912f, -0.978148f,
     0.309017f, -0.951057f,
     0.406737f, -0.913545f,
     0.500000f, -0.866025f,
     0.587785f, -0.809017f,
     0.669131f, -0.743145f,
     0.743145f, -0.669131f,
     0.809017f, -0.587785f,
     0.866025f, -0.500000f,
     0.913545f, -0.406737f,
     0.951057f, -0.309017f,
     0.978148f, -0.207912f,
     0.994522f, -0.104528f
};

void
RenderFilledMarker(Renderer &r, gl::VertexObject &vo, MarkerRepresentation::Symbol symbol, float size, const Color &color, const Matrices &m)
{
    ShaderProperties shadprop;
    shadprop.texUsage = TexUsage::VertexColors;
    shadprop.lightModel = LightingModel::UnlitModel;
    shadprop.fishEyeOverride = FisheyeOverrideMode::Disabled;
    auto* prog = r.getShaderManager().getShader(shadprop);
    if (prog == nullptr) return;
    glVertexAttrib4fv(CelestiaGLProgram::ColorAttributeIndex, color.toVector4().data());
    prog->use();
    prog->setMVPMatrices(*m.projection, *m.modelview);
    switch (symbol)
    {
    case MarkerRepresentation::FilledSquare:
        vo.draw(gl::VertexObject::Primitive::TriangleFan, 4, 0);
        break;
    case MarkerRepresentation::RightArrow:
        vo.draw(gl::VertexObject::Primitive::Triangles, 9, 4);
        break;
    case MarkerRepresentation::LeftArrow:
        vo.draw(gl::VertexObject::Primitive::Triangles, 9, 13);
        break;
    case MarkerRepresentation::UpArrow:
        vo.draw(gl::VertexObject::Primitive::Triangles, 9, 22);
        break;
    case MarkerRepresentation::DownArrow:
        vo.draw(gl::VertexObject::Primitive::Triangles, 9, 31);
        break;
    case MarkerRepresentation::Disk:
        if (size <= 40.0f) // TODO: this should be configurable
            vo.draw(gl::VertexObject::Primitive::TriangleFan, 10, 46);
        else
            vo.draw(gl::VertexObject::Primitive::TriangleFan, 60, 56);
        break;
    default:
        break;
    }
}

constexpr int SelPointerCount  = 3;
constexpr int SelPointerOffset = 40;
constexpr int CrosshairCount   = 3;
constexpr int CrosshairOffset  = 43;

// Hollow Markers

constexpr std::array<float, 340> HollowMarkersData = {
    // Square
    -1.000000f, -1.000000f,
     1.000000f, -1.000000f,
     1.000000f, -1.000000f,
     1.000000f,  1.000000f,
     1.000000f,  1.000000f,
    -1.000000f,  1.000000f,
    -1.000000f,  1.000000f,
    -1.000000f, -1.000000f,
    // Triangle
     0.000000f,  1.000000f,
     1.000000f, -1.000000f,
     1.000000f, -1.000000f,
    -1.000000f, -1.000000f,
    -1.000000f, -1.000000f,
     0.000000f,  1.000000f,
    // Diamond
     0.000000f,  1.000000f,
     1.000000f,  0.000000f,
     1.000000f,  0.000000f,
     0.000000f, -1.000000f,
     0.000000f, -1.000000f,
    -1.000000f,  0.000000f,
    -1.000000f,  0.000000f,
     0.000000f,  1.000000f,
    // Plus
     0.000000f,  1.000000f,
     0.000000f, -1.000000f,
     1.000000f,  0.000000f,
    -1.000000f,  0.000000f,
    // X
    -1.000000f, -1.000000f,
     1.000000f,  1.000000f,
     1.000000f, -1.000000f,
    -1.000000f,  1.000000f,
    // Circle
     1.000000f,  0.000000f,
     0.809017f,  0.587785f,
     0.809017f,  0.587785f,
     0.309017f,  0.951057f,
     0.309017f,  0.951057f,
    -0.309017f,  0.951057f,
    -0.309017f,  0.951057f,
    -0.809017f,  0.587785f,
    -0.809017f,  0.587785f,
    -1.000000f,  0.000000f,
    -1.000000f,  0.000000f,
    -0.809017f, -0.587785f,
    -0.809017f, -0.587785f,
    -0.309017f, -0.951057f,
    -0.309017f, -0.951057f,
     0.309017f, -0.951057f,
     0.309017f, -0.951057f,
     0.809017f, -0.587785f,
     0.809017f, -0.587785f,
     1.000000f,  0.000000f,
    // LargeCircle
     1.000000f,  0.000000f,
     0.994522f,  0.104528f,
     0.994522f,  0.104528f,
     0.978148f,  0.207912f,
     0.978148f,  0.207912f,
     0.951057f,  0.309017f,
     0.951057f,  0.309017f,
     0.913545f,  0.406737f,
     0.913545f,  0.406737f,
     0.866025f,  0.500000f,
     0.866025f,  0.500000f,
     0.809017f,  0.587785f,
     0.809017f,  0.587785f,
     0.743145f,  0.669131f,
     0.743145f,  0.669131f,
     0.669131f,  0.743145f,
     0.669131f,  0.743145f,
     0.587785f,  0.809017f,
     0.587785f,  0.809017f,
     0.500000f,  0.866025f,
     0.500000f,  0.866025f,
     0.406737f,  0.913545f,
     0.406737f,  0.913545f,
     0.309017f,  0.951057f,
     0.309017f,  0.951057f,
     0.207912f,  0.978148f,
     0.207912f,  0.978148f,
     0.104528f,  0.994522f,
     0.104528f,  0.994522f,
     0.000000f,  1.000000f,
     0.000000f,  1.000000f,
    -0.104528f,  0.994522f,
    -0.104528f,  0.994522f,
    -0.207912f,  0.978148f,
    -0.207912f,  0.978148f,
    -0.309017f,  0.951057f,
    -0.309017f,  0.951057f,
    -0.406737f,  0.913545f,
    -0.406737f,  0.913545f,
    -0.500000f,  0.866025f,
    -0.500000f,  0.866025f,
    -0.587785f,  0.809017f,
    -0.587785f,  0.809017f,
    -0.669131f,  0.743145f,
    -0.669131f,  0.743145f,
    -0.743145f,  0.669131f,
    -0.743145f,  0.669131f,
    -0.809017f,  0.587785f,
    -0.809017f,  0.587785f,
    -0.866025f,  0.500000f,
    -0.866025f,  0.500000f,
    -0.913545f,  0.406737f,
    -0.913545f,  0.406737f,
    -0.951057f,  0.309017f,
    -0.951057f,  0.309017f,
    -0.978148f,  0.207912f,
    -0.978148f,  0.207912f,
    -0.994522f,  0.104528f,
    -0.994522f,  0.104528f,
    -1.000000f,  0.000000f,
    -1.000000f,  0.000000f,
    -0.994522f, -0.104528f,
    -0.994522f, -0.104528f,
    -0.978148f, -0.207912f,
    -0.978148f, -0.207912f,
    -0.951057f, -0.309017f,
    -0.951057f, -0.309017f,
    -0.913545f, -0.406737f,
    -0.913545f, -0.406737f,
    -0.866025f, -0.500000f,
    -0.866025f, -0.500000f,
    -0.809017f, -0.587785f,
    -0.809017f, -0.587785f,
    -0.743145f, -0.669131f,
    -0.743145f, -0.669131f,
    -0.669131f, -0.743145f,
    -0.669131f, -0.743145f,
    -0.587785f, -0.809017f,
    -0.587785f, -0.809017f,
    -0.500000f, -0.866025f,
    -0.500000f, -0.866025f,
    -0.406737f, -0.913545f,
    -0.406737f, -0.913545f,
    -0.309017f, -0.951057f,
    -0.309017f, -0.951057f,
    -0.207912f, -0.978148f,
    -0.207912f, -0.978148f,
    -0.104528f, -0.994522f,
    -0.104528f, -0.994522f,
    -0.000000f, -1.000000f,
    -0.000000f, -1.000000f,
     0.104528f, -0.994522f,
     0.104528f, -0.994522f,
     0.207912f, -0.978148f,
     0.207912f, -0.978148f,
     0.309017f, -0.951057f,
     0.309017f, -0.951057f,
     0.406737f, -0.913545f,
     0.406737f, -0.913545f,
     0.500000f, -0.866025f,
     0.500000f, -0.866025f,
     0.587785f, -0.809017f,
     0.587785f, -0.809017f,
     0.669131f, -0.743145f,
     0.669131f, -0.743145f,
     0.743145f, -0.669131f,
     0.743145f, -0.669131f,
     0.809017f, -0.587785f,
     0.809017f, -0.587785f,
     0.866025f, -0.500000f,
     0.866025f, -0.500000f,
     0.913545f, -0.406737f,
     0.913545f, -0.406737f,
     0.951057f, -0.309017f,
     0.951057f, -0.309017f,
     0.978148f, -0.207912f,
     0.978148f, -0.207912f,
     0.994522f, -0.104528f,
     0.994522f, -0.104528f,
     1.000000f,  0.000000f
};

void
RenderHollowMarker(LineRenderer &lr, MarkerRepresentation::Symbol symbol, float size, const Color &color, const Matrices &m)
{
    lr.prerender();
    switch (symbol)
    {
    case MarkerRepresentation::Square:
        lr.render(m, color, 8, 0);
        break;
    case MarkerRepresentation::Triangle:
        lr.render(m, color, 6, 8);
        break;
    case MarkerRepresentation::Diamond:
        lr.render(m, color, 8, 14);
        break;
    case MarkerRepresentation::Plus:
        lr.render(m, color, 4, 22);
        break;
    case MarkerRepresentation::X:
        lr.render(m, color, 4, 26);
        break;
    case MarkerRepresentation::Circle:
        if (size <= 40.0f) // TODO: this should be configurable
            lr.render(m, color, 20, 30);
        else
            lr.render(m, color, 120, 50);
        break;
    default:
        break;
    }
    lr.finish();
}
