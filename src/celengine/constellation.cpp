// This is generated code, it is recommended not to edit it manually.
// Generated by genconstellations.py
// Generator copyright (C) 2023-present, Celestia Development Team
//
// Generator based on the original version of this file,
// Copyright (C) 2001, Chris Laurel <claurel@shatters.net>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.

#include "constellation.h"

#include <array>
#include <cstdint>

#include <celutil/stringutils.h>

using namespace std::string_view_literals;


namespace
{

constexpr std::array<std::string_view, 88> Abbrevs
{
    "And"sv, "Ant"sv, "Aps"sv, "Aql"sv, "Aqr"sv, "Ara"sv, "Ari"sv, "Aur"sv,
    "Boo"sv, "CMa"sv, "CMi"sv, "CVn"sv, "Cae"sv, "Cam"sv, "Cap"sv, "Car"sv,
    "Cas"sv, "Cen"sv, "Cep"sv, "Cet"sv, "Cha"sv, "Cir"sv, "Cnc"sv, "Col"sv,
    "Com"sv, "CrA"sv, "CrB"sv, "Crt"sv, "Cru"sv, "Crv"sv, "Cyg"sv, "Del"sv,
    "Dor"sv, "Dra"sv, "Equ"sv, "Eri"sv, "For"sv, "Gem"sv, "Gru"sv, "Her"sv,
    "Hor"sv, "Hya"sv, "Hyi"sv, "Ind"sv, "LMi"sv, "Lac"sv, "Leo"sv, "Lep"sv,
    "Lib"sv, "Lup"sv, "Lyn"sv, "Lyr"sv, "Men"sv, "Mic"sv, "Mon"sv, "Mus"sv,
    "Nor"sv, "Oct"sv, "Oph"sv, "Ori"sv, "Pav"sv, "Peg"sv, "Per"sv, "Phe"sv,
    "Pic"sv, "PsA"sv, "Psc"sv, "Pup"sv, "Pyx"sv, "Ret"sv, "Scl"sv, "Sco"sv,
    "Sct"sv, "Ser"sv, "Sex"sv, "Sge"sv, "Sgr"sv, "Tau"sv, "Tel"sv, "TrA"sv,
    "Tri"sv, "Tuc"sv, "UMa"sv, "UMi"sv, "Vel"sv, "Vir"sv, "Vol"sv, "Vul"sv,
};

constexpr std::string_view EdgeData =
    "qupeculavnctis minoris austrinise maeleonagittanajorisiopeiasoen"
    "iboologirsacadrpiucharicornoceromedangule berenicescopisum venat"
    "icorumba australes venaticis australisyxpenforoscopiculptoretert"
    "aurodisphindhemigaygborealiscinaelopardalisilalia"sv;

constexpr std::array<std::uint_least32_t, 350> Nodes
{
    UINT32_C(0xff981000), UINT32_C(0xff293107), UINT32_C(0x08097341), UINT32_C(0xff517104),
    UINT32_C(0xff1a014d), UINT32_C(0xff122103), UINT32_C(0x240a33ab), UINT32_C(0xff12312a),
    UINT32_C(0xff1a4153), UINT32_C(0x2b1263c9), UINT32_C(0xff327106), UINT32_C(0xff22c10f),
    UINT32_C(0x380af311), UINT32_C(0xff1af112), UINT32_C(0xff3b1102), UINT32_C(0x450b73ba),
    UINT32_C(0xff23710d), UINT32_C(0xff23a10b), UINT32_C(0xff13d101), UINT32_C(0xff23e108),
    UINT32_C(0xff141109), UINT32_C(0xff1c2102), UINT32_C(0xff1c4100), UINT32_C(0xff146113),
    UINT32_C(0x070c72c1), UINT32_C(0xff14710b), UINT32_C(0xff348107), UINT32_C(0xff1cd103),
    UINT32_C(0x140cf253), UINT32_C(0x150cf247), UINT32_C(0xff14f10f), UINT32_C(0x16000209),
    UINT32_C(0xff1cf112), UINT32_C(0xff2d1113), UINT32_C(0x0b000208), UINT32_C(0x1e0d42d2),
    UINT32_C(0x1f0d4224), UINT32_C(0x200d4212), UINT32_C(0x210d428d), UINT32_C(0x220d4200),
    UINT32_C(0x230d4213), UINT32_C(0xff154228), UINT32_C(0x250d52cd), UINT32_C(0x26155283),
    UINT32_C(0x270d625d), UINT32_C(0x280d6212), UINT32_C(0xff1d61a6), UINT32_C(0x2b00010c),
    UINT32_C(0x2b000218), UINT32_C(0x2d0d624a), UINT32_C(0xff156103), UINT32_C(0x300d7240),
    UINT32_C(0x2c00020f), UINT32_C(0x31156201), UINT32_C(0xff1571a6), UINT32_C(0x340d823e),
    UINT32_C(0x350d8256), UINT32_C(0x360d8227), UINT32_C(0x370d8218), UINT32_C(0x380d8222),
    UINT32_C(0x390d820a), UINT32_C(0x3a0d82c7), UINT32_C(0x3b0d8213), UINT32_C(0x3c0d8207),
    UINT32_C(0xff158103), UINT32_C(0xff159153), UINT32_C(0xff15a10c), UINT32_C(0xff15b10d),
    UINT32_C(0x430dc201), UINT32_C(0x440dc2a6), UINT32_C(0xff15c4b3), UINT32_C(0x4b15d629),
    UINT32_C(0xff25e104), UINT32_C(0xff161103), UINT32_C(0xff16212a), UINT32_C(0x4d0e3217),
    UINT32_C(0x4e0e3224), UINT32_C(0xff163113), UINT32_C(0x510e4251), UINT32_C(0xff16410f),
    UINT32_C(0xff165348), UINT32_C(0x54166224), UINT32_C(0x550e7247), UINT32_C(0x560e7243),
    UINT32_C(0x570e7205), UINT32_C(0x000e714d), UINT32_C(0x010e710b), UINT32_C(0x020004c3),
    UINT32_C(0x0200010d), UINT32_C(0x02000218), UINT32_C(0x03000106), UINT32_C(0x04000113),
    UINT32_C(0xff162101), UINT32_C(0x050e3107), UINT32_C(0x060e310c), UINT32_C(0x070e33cf),
    UINT32_C(0x08000271), UINT32_C(0x0800020c), UINT32_C(0x0c0e1103), UINT32_C(0x0d0e110f),
    UINT32_C(0xff261109), UINT32_C(0x0e0e4102), UINT32_C(0x0f0e4113), UINT32_C(0x100e410d),
    UINT32_C(0x110e4109), UINT32_C(0x120e4102), UINT32_C(0x1316410b), UINT32_C(0x140e5722),
    UINT32_C(0xff1653dc), UINT32_C(0x09000107), UINT32_C(0x0a00010c), UINT32_C(0x170e4106),
    UINT32_C(0x180e410f), UINT32_C(0xff164113), UINT32_C(0x190e5107), UINT32_C(0x1a000141),
    UINT32_C(0x1b00010b), UINT32_C(0x1c163101), UINT32_C(0x1d000108), UINT32_C(0xff163109),
    UINT32_C(0xff1644c7), UINT32_C(0xff16524c), UINT32_C(0x210e6257), UINT32_C(0xff166366),
    UINT32_C(0xff167362), UINT32_C(0x24000399), UINT32_C(0x240001a7), UINT32_C(0xff166210),
    UINT32_C(0x2600020c), UINT32_C(0x2600010d), UINT32_C(0xff165304), UINT32_C(0xff166543),
    UINT32_C(0x29000107), UINT32_C(0xff1e624d), UINT32_C(0x2a00010c), UINT32_C(0x2d0e74bd),
    UINT32_C(0x2e167112), UINT32_C(0x2f168102), UINT32_C(0x300e928d), UINT32_C(0x3100010c),
    UINT32_C(0x31000218), UINT32_C(0x32167109), UINT32_C(0x330e8113), UINT32_C(0x340e8249),
    UINT32_C(0xff1687ad), UINT32_C(0xff16955b), UINT32_C(0x370ea24b), UINT32_C(0x38000103),
    UINT32_C(0xff16922e), UINT32_C(0xff16a450), UINT32_C(0x3b0eb227), UINT32_C(0x3c0eb112),
    UINT32_C(0x3d0eb12a), UINT32_C(0x3e0eb113), UINT32_C(0x3f000103), UINT32_C(0xff16a43d),
    UINT32_C(0x400eb104), UINT32_C(0xff16b272), UINT32_C(0x41000107), UINT32_C(0x42000104),
    UINT32_C(0x43000375), UINT32_C(0xff16910c), UINT32_C(0x4500010c), UINT32_C(0x45000278),
    UINT32_C(0x4b000103), UINT32_C(0xff167213), UINT32_C(0x46000106), UINT32_C(0x470e7112),
    UINT32_C(0x4800010b), UINT32_C(0xff166101), UINT32_C(0x490e7113), UINT32_C(0x4a0e71a7),
    UINT32_C(0x4b000103), UINT32_C(0x4c000113), UINT32_C(0xff165113), UINT32_C(0xff166671),
    UINT32_C(0x4f000107), UINT32_C(0x500e610c), UINT32_C(0x510e632e), UINT32_C(0x52000107),
    UINT32_C(0x5300010c), UINT32_C(0xff16420e), UINT32_C(0xff165320), UINT32_C(0x54000107),
    UINT32_C(0x54000482), UINT32_C(0xff16412a), UINT32_C(0xff16522e), UINT32_C(0x570e6602),
    UINT32_C(0x000e665e), UINT32_C(0x010e63ee), UINT32_C(0xff166354), UINT32_C(0x030e73eb),
    UINT32_C(0x05000103), UINT32_C(0xff166103), UINT32_C(0x07000103), UINT32_C(0xff166106),
    UINT32_C(0x0d000be0), UINT32_C(0xff166104), UINT32_C(0x0b000b90), UINT32_C(0xff16640c),
    UINT32_C(0x0b000e78), UINT32_C(0xff166655), UINT32_C(0x0f0e73dd), UINT32_C(0x100e7735),
    UINT32_C(0xff1674bf), UINT32_C(0xff1682cc), UINT32_C(0x1300010c), UINT32_C(0x13000218),
    UINT32_C(0x1400030b), UINT32_C(0x1500010c), UINT32_C(0x15000218), UINT32_C(0x170e4484),
    UINT32_C(0xff164107), UINT32_C(0xff165327), UINT32_C(0xff166108), UINT32_C(0x1b0e73bc),
    UINT32_C(0x1c000399), UINT32_C(0x1c0001a7), UINT32_C(0x1e00010c), UINT32_C(0x1e000218),
    UINT32_C(0x1f00010c), UINT32_C(0x1f000218), UINT32_C(0x20000112), UINT32_C(0x20000218),
    UINT32_C(0x2100031d), UINT32_C(0x2200010c), UINT32_C(0x22000218), UINT32_C(0x2300010c),
    UINT32_C(0x23000218), UINT32_C(0x2500010c), UINT32_C(0x25000482), UINT32_C(0x27000271),
    UINT32_C(0x2700020c), UINT32_C(0x2800010c), UINT32_C(0x28000278), UINT32_C(0x290d4107),
    UINT32_C(0x2a00010c), UINT32_C(0x2a000218), UINT32_C(0x2d000103), UINT32_C(0x2c00060e),
    UINT32_C(0x2e0d031d), UINT32_C(0x2f000412), UINT32_C(0x2f000218), UINT32_C(0x30000103),
    UINT32_C(0x32000399), UINT32_C(0x320001a7), UINT32_C(0x330cb107), UINT32_C(0x34000103),
    UINT32_C(0x3500010c), UINT32_C(0x35000278), UINT32_C(0x3600010d), UINT32_C(0x3600030b),
    UINT32_C(0x37000103), UINT32_C(0x3900010d), UINT32_C(0x3900030b), UINT32_C(0x3a00010c),
    UINT32_C(0x3a000218), UINT32_C(0x3b00020c), UINT32_C(0x3c00031d), UINT32_C(0xff13f23b),
    UINT32_C(0xff14021f), UINT32_C(0x3f000399), UINT32_C(0x3f0001a7), UINT32_C(0x400bf3b8),
    UINT32_C(0x42000271), UINT32_C(0xff13e10c), UINT32_C(0x440003c4), UINT32_C(0x4400010d),
    UINT32_C(0x4c00010c), UINT32_C(0x4c000218), UINT32_C(0xff13b34e), UINT32_C(0x460bc5b6),
    UINT32_C(0xff13c10b), UINT32_C(0xff13d3a8), UINT32_C(0xff13e32d), UINT32_C(0x4d00010c),
    UINT32_C(0x4d000218), UINT32_C(0x4e00010c), UINT32_C(0x4e000278), UINT32_C(0xff13b563),
    UINT32_C(0x51000103), UINT32_C(0x52000430), UINT32_C(0x53000410), UINT32_C(0x52000630),
    UINT32_C(0x53000610), UINT32_C(0x5500041c), UINT32_C(0x55000112), UINT32_C(0x5600010d),
    UINT32_C(0x5600030b), UINT32_C(0x57000103), UINT32_C(0x00000103), UINT32_C(0x01000103),
    UINT32_C(0x0400010c), UINT32_C(0x04000218), UINT32_C(0x03000103), UINT32_C(0x0600010d),
    UINT32_C(0x0600030b), UINT32_C(0x0c00010c), UINT32_C(0x0c000278), UINT32_C(0x1600025d),
    UINT32_C(0x16000213), UINT32_C(0x090a7430), UINT32_C(0x0a0a7410), UINT32_C(0x0e00010c),
    UINT32_C(0x0e000218), UINT32_C(0x0f000103), UINT32_C(0x10000103), UINT32_C(0x1100010c),
    UINT32_C(0x11000218), UINT32_C(0x1200010c), UINT32_C(0x12000218), UINT32_C(0x17000103),
    UINT32_C(0x18000a69), UINT32_C(0x18000b68), UINT32_C(0xff11c10e), UINT32_C(0xff11d220),
    UINT32_C(0x1d00010c), UINT32_C(0x1d000218), UINT32_C(0x1b00020c), UINT32_C(0x29000103),
    UINT32_C(0x2c00080e), UINT32_C(0x33000103), UINT32_C(0x3d00010c), UINT32_C(0x3d000218),
    UINT32_C(0x3e00010c), UINT32_C(0x3e000218), UINT32_C(0x4000020c), UINT32_C(0xff113915),
    UINT32_C(0x42000278), UINT32_C(0x4700010c), UINT32_C(0x47000218), UINT32_C(0x4600020c),
    UINT32_C(0x4800010c), UINT32_C(0x48000278), UINT32_C(0x4900010d), UINT32_C(0x4900030b),
    UINT32_C(0x4a00010d), UINT32_C(0x4a00030b), UINT32_C(0x5008a10c), UINT32_C(0x5008a278),
    UINT32_C(0x0900020c), UINT32_C(0x0a00020c), UINT32_C(0x1900099d), UINT32_C(0x1a0008d4),
    UINT32_C(0x1900099d), UINT32_C(0x1a0008d4), UINT32_C(0x4100010c), UINT32_C(0x41000218),
    UINT32_C(0x4f000a9c), UINT32_C(0x4f000988),
};

} // end unnamed namespace


std::tuple<std::string_view, std::string_view>
ParseConstellation(std::string_view name)
{
    std::string_view remaining = name;
    std::string_view abbrev;
    std::string_view suffix = remaining;
    std::uint_least32_t node = 0;
    std::uint_least32_t nodeData = Nodes[node];
    for (;;)
    {
        if (std::uint_least32_t value = nodeData >> 24; value < Abbrevs.size())
        {
            abbrev = Abbrevs[value];
            suffix = remaining;
        }

        std::uint_least32_t childOffset = (nodeData >> 12) & 0x7f;
        std::uint_least32_t numChildren = (nodeData >> 19) & 0x1f;
        bool isMatched = false;
        for (std::uint_least32_t i = 0; i < numChildren; ++i)
        {
            auto nextNode = node + childOffset + i;
            std::uint_least32_t nextNodeData = Nodes[nextNode];
            std::uint_least32_t edgeStart = nextNodeData & 0xff;
            std::uint_least32_t edgeLength = (nextNodeData >> 8) & 0x0f;
            std::string_view edge = EdgeData.substr(edgeStart, edgeLength);
            auto comparison = compareIgnoringCase(remaining, edge, edge.size());
            if (comparison > 0)
                continue;

            if (comparison == 0)
            {
                node = nextNode;
                nodeData = nextNodeData;
                remaining = remaining.substr(edgeLength);
                isMatched = true;
            }
            break;
        }

        if (!isMatched)
            break;
    }

    return std::make_tuple(abbrev, suffix);
}
